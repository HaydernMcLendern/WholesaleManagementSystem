import pymysql
# g is an object global to the application context
# where we'll store the db connection
# NOTE: I'm still not entirely sure where the app context ends,
#       but it seems it's NOT global to all users
#       (e.g., User1 and User2 will have different g objects)
from flask import current_app, g, abort
from flask.cli import with_appcontext
import click
import base64

def get_db():
    """
    Initialize and return a connection to the database.

    :return: db connection object
    """
    # see if we already have an active connection
    if 'db' not in g:
        # create one if not
        # most of the options are self-explanatory; autocommit makes sure
        # that each DB insert/update takes immediate effect
        try:
            g.db = pymysql.connect(
                host=current_app.config['MYSQL_HOST'],
                user=current_app.config['MYSQL_USER'],
                password=current_app.config['MYSQL_PASS'],
                db=current_app.config['MYSQL_DB'],
                cursorclass=pymysql.cursors.DictCursor,
                autocommit=True
            )
        except: # which exception?
            abort(500)

    return g.db

def close_db(e=None):
    """
    Close the database connection.
    """
    # remove db from g
    db = g.pop('db', None)
    if db is not None:
        # and close the connection
        db.close()

def init_app(app):
    """
    Add ``close_db()`` to the session teardown code.
    It is written this way because the app is generated by a factory
    (``create_app()``), so the app will have to call this upon
    initialization in ``create_app()``.
    """
    app.teardown_appcontext(close_db)
"""
Protect the user - email and username
"""
def mystify(input):
    return base64.b64encode(input.encode('utf-8'))

def demystify(input):
    return base64.b64decode(input).decode('utf-8')
